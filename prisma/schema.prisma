datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int                @id @default(autoincrement())
  userName         String             @unique
  userEmail        String             @unique
  userPassword     String
  userOnline       Boolean            @default(false)
  userLastOnline   DateTime           @default(now())
  userCreatedAt    DateTime           @default(now())
  userUUID         String
  userImage        String?
  groups           Groups[]
  Tokens           Tokens[]
  GroupMessages    GroupMessages[]
  PersonalMessages PersonalMessages[]
  Rooms            Rooms[]
  Notifications    Notifications[]
}

model Group {
  id            Int             @id @default(autoincrement())
  groupName     String
  groups        Groups[]
  GroupMessages GroupMessages[]
}

model Groups {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
}

model Tokens {
  id       Int      @id @default(autoincrement())
  token    String   @db.Text
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  expireIn DateTime
}

model PersonalMessages {
  id        Int      @id @default(autoincrement())
  message   String?  @db.Text
  createdAt DateTime @default(now())
  roomUUID  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @default(1)
  type      String   @default("text")
}

model GroupMessages {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  message   String   @db.Text
  createdAt DateTime @default(now())
}

model Rooms {
  id       Int    @id @default(autoincrement())
  roomUUID String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
}

model InviteToRoom {
  id            Int             @id @default(autoincrement())
  roomId        String
  fromUserId    Int
  toUserId      Int
  Notifications Notifications[]
  accept        Int             @default(0)
}

model Notifications {
  id             Int          @id @default(autoincrement())
  type           String?
  notification   InviteToRoom @relation(fields: [notificationId], references: [id])
  notificationId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @default(1)
  viewed         Boolean      @default(false)
}
